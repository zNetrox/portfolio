---
// Importer les données (tu peux les stocker dans un fichier JSON ou TypeScript)
import projects from "../js/dataProjects"; 

// Fonction pour générer les routes dynamiques
export async function getStaticPaths() {
  return projects.map((project) => ({
    params: { slug: project.slug },
  }));
}

// Récupérer le paramètre "slug" depuis l'URL
const { slug } = Astro.params;

// Trouver le projet correspondant
const project = projects.find((p) => p.slug === slug);

// Si le projet n'existe pas, afficher une erreur
if (!project) {
  throw new Error(`Projet non trouvé: ${slug}`);
}

import Layout from '../layouts/Layout.astro';
import Header from '../components/header.astro';
import Footer from '../components/footer.astro';
import Menu from '../components/menu.astro';
import Cursor from '../components/cursor.astro';
import List from '../components/list.astro';

import '../styles/global.css';
import '../js/descriptionProjet.js';
---

<Layout title={"Projet " + project.title}>
    <Cursor/>
	<Menu/>
	<Header/>

	<section class="description-sec-1">
        <div>
            <h1>{project.title}</h1>
		    <span class="line"></span>
        </div>
        <p>{project.description}</p>
	</section>

    <section class="description-sec-2">
        <!-- liste des compétences -->
        {project.skills.length != 0 && 
            <List
                principalTitle="Compétences mis en oeuvre"
                listTitles= {project.skills}
            />
        }
        <!-- liste des outils -->
        {project.tools.length != 0 && 
            <List
                principalTitle="Outils utilisés"
                listTitles= {project.tools}
            />
        }
    </section>

    <section class="description-sec-3">
        {project.listImgFile.map((img) => (
            <img src={"/img/" + img} alt="image d'illustration" />
        ))}
        
    </section>

    <section class="description-sec-4">
        <div>
            <div>
                <span class="line"></span>
                <h2>GitHub Du Projet</h2>
            </div>
            <div>
                <a class="cercle-button over-opacity" href={project.linkGit} target="_blank">
                    <div class="arrow">
                        <div><span></span></div>
                        <div><span></span></div>
                        <div><span></span></div>
                    </div>
                </a>
            </div>
        </div>

        <div id="tiles-11">
            <div><span></span></div>
            <div><span></span></div>
        </div>
        <div id="tiles-12">
            <div><span></span></div>
        </div>
        
	</section>
    <Footer/>
</Layout>

<script>
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

gsap.registerPlugin(ScrollTrigger);

let images = gsap.utils.toArray(".description-sec-3 img");
let rotationsDegres = [-1, 2, -5]


let tl = gsap.timeline({
scrollTrigger: {
        trigger: ".description-sec-3",
        scrub: true,
        pin: true,
        start: "top top",
        end: `${50 * images.length}%`
    }
});


images.forEach((img, i) => {
    // @ts-ignore 
    tl.to(img, { top: "50%", y: "-70%", rotation: rotationsDegres[i] });
});


    

</script>